/*
------------------------------------------------------------------------------ 
This code was generated by Amplication. 
 
Changes to this file will be lost if the code is regenerated. 

There are other ways to to customize your code, see this doc to learn more
https://docs.amplication.com/how-to/custom-code

------------------------------------------------------------------------------
  */
import * as graphql from "@nestjs/graphql";
import { GraphQLError } from "graphql";
import { isRecordNotFoundError } from "../../prisma.util";
import { MetaQueryPayload } from "../../util/MetaQueryPayload";
import * as nestAccessControl from "nest-access-control";
import * as gqlACGuard from "../../auth/gqlAC.guard";
import { GqlDefaultAuthGuard } from "../../auth/gqlDefaultAuth.guard";
import * as common from "@nestjs/common";
import { AclFilterResponseInterceptor } from "../../interceptors/aclFilterResponse.interceptor";
import { AclValidateRequestInterceptor } from "../../interceptors/aclValidateRequest.interceptor";
import { Prescription } from "./Prescription";
import { PrescriptionCountArgs } from "./PrescriptionCountArgs";
import { PrescriptionFindManyArgs } from "./PrescriptionFindManyArgs";
import { PrescriptionFindUniqueArgs } from "./PrescriptionFindUniqueArgs";
import { CreatePrescriptionArgs } from "./CreatePrescriptionArgs";
import { UpdatePrescriptionArgs } from "./UpdatePrescriptionArgs";
import { DeletePrescriptionArgs } from "./DeletePrescriptionArgs";
import { Diagnosis } from "../../diagnosis/base/Diagnosis";
import { Medication } from "../../medication/base/Medication";
import { PrescriptionService } from "../prescription.service";
@common.UseGuards(GqlDefaultAuthGuard, gqlACGuard.GqlACGuard)
@graphql.Resolver(() => Prescription)
export class PrescriptionResolverBase {
  constructor(
    protected readonly service: PrescriptionService,
    protected readonly rolesBuilder: nestAccessControl.RolesBuilder
  ) {}

  @graphql.Query(() => MetaQueryPayload)
  @nestAccessControl.UseRoles({
    resource: "Prescription",
    action: "read",
    possession: "any",
  })
  async _prescriptionsMeta(
    @graphql.Args() args: PrescriptionCountArgs
  ): Promise<MetaQueryPayload> {
    const result = await this.service.count(args);
    return {
      count: result,
    };
  }

  @common.UseInterceptors(AclFilterResponseInterceptor)
  @graphql.Query(() => [Prescription])
  @nestAccessControl.UseRoles({
    resource: "Prescription",
    action: "read",
    possession: "any",
  })
  async prescriptions(
    @graphql.Args() args: PrescriptionFindManyArgs
  ): Promise<Prescription[]> {
    return this.service.prescriptions(args);
  }

  @common.UseInterceptors(AclFilterResponseInterceptor)
  @graphql.Query(() => Prescription, { nullable: true })
  @nestAccessControl.UseRoles({
    resource: "Prescription",
    action: "read",
    possession: "own",
  })
  async prescription(
    @graphql.Args() args: PrescriptionFindUniqueArgs
  ): Promise<Prescription | null> {
    const result = await this.service.prescription(args);
    if (result === null) {
      return null;
    }
    return result;
  }

  @common.UseInterceptors(AclValidateRequestInterceptor)
  @graphql.Mutation(() => Prescription)
  @nestAccessControl.UseRoles({
    resource: "Prescription",
    action: "create",
    possession: "any",
  })
  async createPrescription(
    @graphql.Args() args: CreatePrescriptionArgs
  ): Promise<Prescription> {
    return await this.service.createPrescription({
      ...args,
      data: {
        ...args.data,

        diagnosis: args.data.diagnosis
          ? {
              connect: args.data.diagnosis,
            }
          : undefined,

        medication: args.data.medication
          ? {
              connect: args.data.medication,
            }
          : undefined,
      },
    });
  }

  @common.UseInterceptors(AclValidateRequestInterceptor)
  @graphql.Mutation(() => Prescription)
  @nestAccessControl.UseRoles({
    resource: "Prescription",
    action: "update",
    possession: "any",
  })
  async updatePrescription(
    @graphql.Args() args: UpdatePrescriptionArgs
  ): Promise<Prescription | null> {
    try {
      return await this.service.updatePrescription({
        ...args,
        data: {
          ...args.data,

          diagnosis: args.data.diagnosis
            ? {
                connect: args.data.diagnosis,
              }
            : undefined,

          medication: args.data.medication
            ? {
                connect: args.data.medication,
              }
            : undefined,
        },
      });
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new GraphQLError(
          `No resource was found for ${JSON.stringify(args.where)}`
        );
      }
      throw error;
    }
  }

  @graphql.Mutation(() => Prescription)
  @nestAccessControl.UseRoles({
    resource: "Prescription",
    action: "delete",
    possession: "any",
  })
  async deletePrescription(
    @graphql.Args() args: DeletePrescriptionArgs
  ): Promise<Prescription | null> {
    try {
      return await this.service.deletePrescription(args);
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new GraphQLError(
          `No resource was found for ${JSON.stringify(args.where)}`
        );
      }
      throw error;
    }
  }

  @common.UseInterceptors(AclFilterResponseInterceptor)
  @graphql.ResolveField(() => Diagnosis, {
    nullable: true,
    name: "diagnosis",
  })
  @nestAccessControl.UseRoles({
    resource: "Diagnosis",
    action: "read",
    possession: "any",
  })
  async getDiagnosis(
    @graphql.Parent() parent: Prescription
  ): Promise<Diagnosis | null> {
    const result = await this.service.getDiagnosis(parent.id);

    if (!result) {
      return null;
    }
    return result;
  }

  @common.UseInterceptors(AclFilterResponseInterceptor)
  @graphql.ResolveField(() => Medication, {
    nullable: true,
    name: "medication",
  })
  @nestAccessControl.UseRoles({
    resource: "Medication",
    action: "read",
    possession: "any",
  })
  async getMedication(
    @graphql.Parent() parent: Prescription
  ): Promise<Medication | null> {
    const result = await this.service.getMedication(parent.id);

    if (!result) {
      return null;
    }
    return result;
  }
}
