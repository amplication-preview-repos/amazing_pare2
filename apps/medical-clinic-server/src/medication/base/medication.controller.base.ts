/*
------------------------------------------------------------------------------ 
This code was generated by Amplication. 
 
Changes to this file will be lost if the code is regenerated. 

There are other ways to to customize your code, see this doc to learn more
https://docs.amplication.com/how-to/custom-code

------------------------------------------------------------------------------
  */
import * as common from "@nestjs/common";
import * as swagger from "@nestjs/swagger";
import { isRecordNotFoundError } from "../../prisma.util";
import * as errors from "../../errors";
import { Request } from "express";
import { plainToClass } from "class-transformer";
import { ApiNestedQuery } from "../../decorators/api-nested-query.decorator";
import * as nestAccessControl from "nest-access-control";
import * as defaultAuthGuard from "../../auth/defaultAuth.guard";
import { MedicationService } from "../medication.service";
import { AclValidateRequestInterceptor } from "../../interceptors/aclValidateRequest.interceptor";
import { AclFilterResponseInterceptor } from "../../interceptors/aclFilterResponse.interceptor";
import { MedicationCreateInput } from "./MedicationCreateInput";
import { Medication } from "./Medication";
import { MedicationFindManyArgs } from "./MedicationFindManyArgs";
import { MedicationWhereUniqueInput } from "./MedicationWhereUniqueInput";
import { MedicationUpdateInput } from "./MedicationUpdateInput";
import { InventoryFindManyArgs } from "../../inventory/base/InventoryFindManyArgs";
import { Inventory } from "../../inventory/base/Inventory";
import { InventoryWhereUniqueInput } from "../../inventory/base/InventoryWhereUniqueInput";
import { PrescriptionFindManyArgs } from "../../prescription/base/PrescriptionFindManyArgs";
import { Prescription } from "../../prescription/base/Prescription";
import { PrescriptionWhereUniqueInput } from "../../prescription/base/PrescriptionWhereUniqueInput";
import { SaleFindManyArgs } from "../../sale/base/SaleFindManyArgs";
import { Sale } from "../../sale/base/Sale";
import { SaleWhereUniqueInput } from "../../sale/base/SaleWhereUniqueInput";

@swagger.ApiBearerAuth()
@common.UseGuards(defaultAuthGuard.DefaultAuthGuard, nestAccessControl.ACGuard)
export class MedicationControllerBase {
  constructor(
    protected readonly service: MedicationService,
    protected readonly rolesBuilder: nestAccessControl.RolesBuilder
  ) {}
  @common.UseInterceptors(AclValidateRequestInterceptor)
  @common.Post()
  @swagger.ApiCreatedResponse({ type: Medication })
  @nestAccessControl.UseRoles({
    resource: "Medication",
    action: "create",
    possession: "any",
  })
  @swagger.ApiForbiddenResponse({
    type: errors.ForbiddenException,
  })
  async createMedication(
    @common.Body() data: MedicationCreateInput
  ): Promise<Medication> {
    return await this.service.createMedication({
      data: data,
      select: {
        createdAt: true,
        description: true,
        id: true,
        name: true,
        price: true,
        quantityInStock: true,
        updatedAt: true,
      },
    });
  }

  @common.UseInterceptors(AclFilterResponseInterceptor)
  @common.Get()
  @swagger.ApiOkResponse({ type: [Medication] })
  @ApiNestedQuery(MedicationFindManyArgs)
  @nestAccessControl.UseRoles({
    resource: "Medication",
    action: "read",
    possession: "any",
  })
  @swagger.ApiForbiddenResponse({
    type: errors.ForbiddenException,
  })
  async medications(@common.Req() request: Request): Promise<Medication[]> {
    const args = plainToClass(MedicationFindManyArgs, request.query);
    return this.service.medications({
      ...args,
      select: {
        createdAt: true,
        description: true,
        id: true,
        name: true,
        price: true,
        quantityInStock: true,
        updatedAt: true,
      },
    });
  }

  @common.UseInterceptors(AclFilterResponseInterceptor)
  @common.Get("/:id")
  @swagger.ApiOkResponse({ type: Medication })
  @swagger.ApiNotFoundResponse({ type: errors.NotFoundException })
  @nestAccessControl.UseRoles({
    resource: "Medication",
    action: "read",
    possession: "own",
  })
  @swagger.ApiForbiddenResponse({
    type: errors.ForbiddenException,
  })
  async medication(
    @common.Param() params: MedicationWhereUniqueInput
  ): Promise<Medication | null> {
    const result = await this.service.medication({
      where: params,
      select: {
        createdAt: true,
        description: true,
        id: true,
        name: true,
        price: true,
        quantityInStock: true,
        updatedAt: true,
      },
    });
    if (result === null) {
      throw new errors.NotFoundException(
        `No resource was found for ${JSON.stringify(params)}`
      );
    }
    return result;
  }

  @common.UseInterceptors(AclValidateRequestInterceptor)
  @common.Patch("/:id")
  @swagger.ApiOkResponse({ type: Medication })
  @swagger.ApiNotFoundResponse({ type: errors.NotFoundException })
  @nestAccessControl.UseRoles({
    resource: "Medication",
    action: "update",
    possession: "any",
  })
  @swagger.ApiForbiddenResponse({
    type: errors.ForbiddenException,
  })
  async updateMedication(
    @common.Param() params: MedicationWhereUniqueInput,
    @common.Body() data: MedicationUpdateInput
  ): Promise<Medication | null> {
    try {
      return await this.service.updateMedication({
        where: params,
        data: data,
        select: {
          createdAt: true,
          description: true,
          id: true,
          name: true,
          price: true,
          quantityInStock: true,
          updatedAt: true,
        },
      });
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new errors.NotFoundException(
          `No resource was found for ${JSON.stringify(params)}`
        );
      }
      throw error;
    }
  }

  @common.Delete("/:id")
  @swagger.ApiOkResponse({ type: Medication })
  @swagger.ApiNotFoundResponse({ type: errors.NotFoundException })
  @nestAccessControl.UseRoles({
    resource: "Medication",
    action: "delete",
    possession: "any",
  })
  @swagger.ApiForbiddenResponse({
    type: errors.ForbiddenException,
  })
  async deleteMedication(
    @common.Param() params: MedicationWhereUniqueInput
  ): Promise<Medication | null> {
    try {
      return await this.service.deleteMedication({
        where: params,
        select: {
          createdAt: true,
          description: true,
          id: true,
          name: true,
          price: true,
          quantityInStock: true,
          updatedAt: true,
        },
      });
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new errors.NotFoundException(
          `No resource was found for ${JSON.stringify(params)}`
        );
      }
      throw error;
    }
  }

  @common.UseInterceptors(AclFilterResponseInterceptor)
  @common.Get("/:id/inventories")
  @ApiNestedQuery(InventoryFindManyArgs)
  @nestAccessControl.UseRoles({
    resource: "Inventory",
    action: "read",
    possession: "any",
  })
  async findInventories(
    @common.Req() request: Request,
    @common.Param() params: MedicationWhereUniqueInput
  ): Promise<Inventory[]> {
    const query = plainToClass(InventoryFindManyArgs, request.query);
    const results = await this.service.findInventories(params.id, {
      ...query,
      select: {
        createdAt: true,
        id: true,
        lastUpdated: true,

        medication: {
          select: {
            id: true,
          },
        },

        quantity: true,
        updatedAt: true,
      },
    });
    if (results === null) {
      throw new errors.NotFoundException(
        `No resource was found for ${JSON.stringify(params)}`
      );
    }
    return results;
  }

  @common.Post("/:id/inventories")
  @nestAccessControl.UseRoles({
    resource: "Medication",
    action: "update",
    possession: "any",
  })
  async connectInventories(
    @common.Param() params: MedicationWhereUniqueInput,
    @common.Body() body: InventoryWhereUniqueInput[]
  ): Promise<void> {
    const data = {
      inventories: {
        connect: body,
      },
    };
    await this.service.updateMedication({
      where: params,
      data,
      select: { id: true },
    });
  }

  @common.Patch("/:id/inventories")
  @nestAccessControl.UseRoles({
    resource: "Medication",
    action: "update",
    possession: "any",
  })
  async updateInventories(
    @common.Param() params: MedicationWhereUniqueInput,
    @common.Body() body: InventoryWhereUniqueInput[]
  ): Promise<void> {
    const data = {
      inventories: {
        set: body,
      },
    };
    await this.service.updateMedication({
      where: params,
      data,
      select: { id: true },
    });
  }

  @common.Delete("/:id/inventories")
  @nestAccessControl.UseRoles({
    resource: "Medication",
    action: "update",
    possession: "any",
  })
  async disconnectInventories(
    @common.Param() params: MedicationWhereUniqueInput,
    @common.Body() body: InventoryWhereUniqueInput[]
  ): Promise<void> {
    const data = {
      inventories: {
        disconnect: body,
      },
    };
    await this.service.updateMedication({
      where: params,
      data,
      select: { id: true },
    });
  }

  @common.UseInterceptors(AclFilterResponseInterceptor)
  @common.Get("/:id/prescriptions")
  @ApiNestedQuery(PrescriptionFindManyArgs)
  @nestAccessControl.UseRoles({
    resource: "Prescription",
    action: "read",
    possession: "any",
  })
  async findPrescriptions(
    @common.Req() request: Request,
    @common.Param() params: MedicationWhereUniqueInput
  ): Promise<Prescription[]> {
    const query = plainToClass(PrescriptionFindManyArgs, request.query);
    const results = await this.service.findPrescriptions(params.id, {
      ...query,
      select: {
        createdAt: true,

        diagnosis: {
          select: {
            id: true,
          },
        },

        dosage: true,
        frequency: true,
        id: true,

        medication: {
          select: {
            id: true,
          },
        },

        updatedAt: true,
      },
    });
    if (results === null) {
      throw new errors.NotFoundException(
        `No resource was found for ${JSON.stringify(params)}`
      );
    }
    return results;
  }

  @common.Post("/:id/prescriptions")
  @nestAccessControl.UseRoles({
    resource: "Medication",
    action: "update",
    possession: "any",
  })
  async connectPrescriptions(
    @common.Param() params: MedicationWhereUniqueInput,
    @common.Body() body: PrescriptionWhereUniqueInput[]
  ): Promise<void> {
    const data = {
      prescriptions: {
        connect: body,
      },
    };
    await this.service.updateMedication({
      where: params,
      data,
      select: { id: true },
    });
  }

  @common.Patch("/:id/prescriptions")
  @nestAccessControl.UseRoles({
    resource: "Medication",
    action: "update",
    possession: "any",
  })
  async updatePrescriptions(
    @common.Param() params: MedicationWhereUniqueInput,
    @common.Body() body: PrescriptionWhereUniqueInput[]
  ): Promise<void> {
    const data = {
      prescriptions: {
        set: body,
      },
    };
    await this.service.updateMedication({
      where: params,
      data,
      select: { id: true },
    });
  }

  @common.Delete("/:id/prescriptions")
  @nestAccessControl.UseRoles({
    resource: "Medication",
    action: "update",
    possession: "any",
  })
  async disconnectPrescriptions(
    @common.Param() params: MedicationWhereUniqueInput,
    @common.Body() body: PrescriptionWhereUniqueInput[]
  ): Promise<void> {
    const data = {
      prescriptions: {
        disconnect: body,
      },
    };
    await this.service.updateMedication({
      where: params,
      data,
      select: { id: true },
    });
  }

  @common.UseInterceptors(AclFilterResponseInterceptor)
  @common.Get("/:id/sales")
  @ApiNestedQuery(SaleFindManyArgs)
  @nestAccessControl.UseRoles({
    resource: "Sale",
    action: "read",
    possession: "any",
  })
  async findSales(
    @common.Req() request: Request,
    @common.Param() params: MedicationWhereUniqueInput
  ): Promise<Sale[]> {
    const query = plainToClass(SaleFindManyArgs, request.query);
    const results = await this.service.findSales(params.id, {
      ...query,
      select: {
        createdAt: true,
        date: true,
        id: true,

        medication: {
          select: {
            id: true,
          },
        },

        quantity: true,
        totalPrice: true,
        updatedAt: true,
      },
    });
    if (results === null) {
      throw new errors.NotFoundException(
        `No resource was found for ${JSON.stringify(params)}`
      );
    }
    return results;
  }

  @common.Post("/:id/sales")
  @nestAccessControl.UseRoles({
    resource: "Medication",
    action: "update",
    possession: "any",
  })
  async connectSales(
    @common.Param() params: MedicationWhereUniqueInput,
    @common.Body() body: SaleWhereUniqueInput[]
  ): Promise<void> {
    const data = {
      sales: {
        connect: body,
      },
    };
    await this.service.updateMedication({
      where: params,
      data,
      select: { id: true },
    });
  }

  @common.Patch("/:id/sales")
  @nestAccessControl.UseRoles({
    resource: "Medication",
    action: "update",
    possession: "any",
  })
  async updateSales(
    @common.Param() params: MedicationWhereUniqueInput,
    @common.Body() body: SaleWhereUniqueInput[]
  ): Promise<void> {
    const data = {
      sales: {
        set: body,
      },
    };
    await this.service.updateMedication({
      where: params,
      data,
      select: { id: true },
    });
  }

  @common.Delete("/:id/sales")
  @nestAccessControl.UseRoles({
    resource: "Medication",
    action: "update",
    possession: "any",
  })
  async disconnectSales(
    @common.Param() params: MedicationWhereUniqueInput,
    @common.Body() body: SaleWhereUniqueInput[]
  ): Promise<void> {
    const data = {
      sales: {
        disconnect: body,
      },
    };
    await this.service.updateMedication({
      where: params,
      data,
      select: { id: true },
    });
  }
}
